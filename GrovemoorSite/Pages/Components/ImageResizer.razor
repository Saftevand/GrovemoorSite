@using GrovemoorSite.Services.Interfaces
@inject IImageResizer ImageResizerService
@inject IJSRuntime JSRuntime

@* Select/drag and drop image *@
<div class="self-start fill-[]">
    <div class="relative flex flex-col rounded-lg border-2 border-dashed"
         @ondragenter="OnDragEnter"
         @ondragover="OnDragEnter"
         @ondragleave="OnDragLeave">
        <InputFile OnChange="@HandleFileUpload" class="absolute h-full w-full opacity-0 hover:cursor-pointer" />
        <div class="mt-8 p-4">
            <div class="@(isDragging ? "hidden" : "")">
            </div>
            <span>
                Release an image here
            </span>
            <div class="@(isDragging ? "" : "hidden") flex flex-row gap-4">
                <span class="material-symbols-outlined">
                    upload
                </span>
            </div>

        </div>
    </div>
</div>

@code {
    private bool isDragging = false;
    private readonly static List<string> SupportedFileTypes = new()
    {  "image/jpeg", "image/jpg" };


    private void OnDragEnter(DragEventArgs e)
    {
        isDragging = true;
    }

    private void OnDragLeave(DragEventArgs e)
    {
        isDragging = false;
    }

    private async void HandleFileUpload(InputFileChangeEventArgs args)
    {
        isDragging = false;
        var file = args.GetMultipleFiles()[0];

        // Return in case of unsupported file type
        if (!SupportedFileTypes.Contains(file.ContentType))
        {
            return;
        }
        byte[] bytes = new byte[file.Size];
        var path = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());

        FileStream filestream = new(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(filestream);
        filestream.Position = 0;

        byte[] resizedBytes = ImageResizerService.ResizeWithSkiaSharp(filestream);

        var resizedName = $"Resized_{file.Name}";
        await JSRuntime.InvokeVoidAsync("downloadFileFromByteArray", resizedName, file.ContentType, resizedBytes);

    }
}